#!/usr/bin/env python

from sys import argv, exit, stdout
from os.path import exists
from pygeode.formats import netcdf as nc, fstd as rpn
from pygeode.dataset import asdataset

# Extract keyword options
kwargs = [a for a in argv if a.startswith('--')]
argv = [a for a in argv if a not in kwargs]

squash_forecasts = False
if '--squash-forecasts' in kwargs:
  squash_forecasts = True
  kwargs.remove('--squash-forecasts')

oldstyle = False
if '--old-output-style' in kwargs:
  oldstyle = True
  kwargs.remove('--old-output-style')

selected_vars = []
param = [p for p in kwargs if p.startswith('--vars')]
for p in param:
  if '=' not in p:
    print 'No variables passed to --vars'
    exit(1)
  selected_vars.extend(p.split('=')[1].split(','))
  kwargs.remove(p)
if len(selected_vars) > 0:
  print 'Looking for variables:', ' '.join(selected_vars)
else:
  selected_vars = None


if len(kwargs) > 0:
  print "Unknown keyword arg(s):", kwargs
  exit(1)

if len(argv) != 3:
  print "Usage: %s [--vars=<var1>,<var2>,...] [--squash-forecasts] [--old-output-style] <rpn_file> <netcdf_file>"%argv[0]
  exit(1)

rpnfile = argv[1]
ncfile = argv[2]

# Make sure input file exists
if not exists(rpnfile):
  print "Error: '%s' does not exist!"%(rpnfile)
  exit(1)

# Check if output file already exists
if exists(ncfile):
  overwrite = False
  if stdout.isatty():
    while True:
      print "Warning: '%s' already exists!  Overwrite? (y/n):"%(ncfile),
      ans = raw_input()
      if ans.lower() in ('y','yes'):
        overwrite = True
        break
      if ans.lower() in ('n','no'):
        overwrite = False
        break
      print "Sorry, invalid response."
  if overwrite is False:
    print "Refusing to overwrite existing file '%s'."%(ncfile)
    exit(1)


# Load the input file
data = rpn.open(rpnfile, squash_forecasts=squash_forecasts, raw_list=True)

if selected_vars is not None:
  data = [d for d in data if d.name in selected_vars]

print "Found variables:", ' '.join(d.name for d in data)

# Tweak the data?
if oldstyle:
  import numpy as np
  data = asdataset(data)
  if 'lat' in data:
    data = data.rename_axes(x='xcoord', y='ycoord')
    data = data.rename_vars(lat='latitudes', lon='longitudes')
    # Fudge the longitudes to be from -180..180
    lon = np.array(data.longitudes.get())
    lon[lon>180] -= 360
    data.longitudes.values = lon
  # Convert relative times to hours (instead of seconds)
  data.time.values = data.time.values / 3600.
  data.time.units = 'hours'
  # Reverse the z-axis order
  data = list(data.vars)
  for i, var in enumerate(data):
    if not var.hasaxis('zaxis'): continue
    sl = [slice(None)]*var.naxes
    iz = var.whichaxis('zaxis')
    sl[iz] = slice(var.shape[iz]-1,None,-1)
    data[i] = var.slice[sl]

# Write to netcdf
nc.save(ncfile, data)

