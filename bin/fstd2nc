#!/usr/bin/env python

from sys import argv, exit, stdout
from os.path import exists
from pygeode.formats import netcdf, fstd
from pygeode.dataset import asdataset
from argparse import ArgumentParser

# Extract keyword options
parser = ArgumentParser(description="Converts an RPN standard file (FSTD) to netCDF format.")
parser.add_argument('rpnfile', metavar='<fstd_file>', help='The FSTD file to convert.')
parser.add_argument('ncfile', metavar='<netcdf_file>', help='The name of the netCDF file to create.')
parser.add_argument('--vars', metavar='VAR1,VAR2,...', help='Comma-seperated list of variables to convert.  By default, all variables are converted.')
parser.add_argument('--squash-forecasts', action='store_true', help='Use the date of validity for the "time" axis.  Otherwise, the default is to use the date of original analysis, and the forecast length goes in a "forecast" axis.')
parser.add_argument('--old-output-style', action='store_true', dest='oldstyle', help='Use the same naming conventions as an older (deprecated) version of this utility.')
args = parser.parse_args()

if args.vars is not None:
  selected_vars = args.vars.split(',')
  print 'Looking for variables:', ' '.join(selected_vars)
else:
  selected_vars = None


# Make sure input file exists
if not exists(args.rpnfile):
  print "Error: '%s' does not exist!"%(args.rpnfile)
  exit(1)

# Check if output file already exists
if exists(args.ncfile):
  overwrite = False
  if stdout.isatty():
    while True:
      print "Warning: '%s' already exists!  Overwrite? (y/n):"%(args.ncfile),
      ans = raw_input()
      if ans.lower() in ('y','yes'):
        overwrite = True
        break
      if ans.lower() in ('n','no'):
        overwrite = False
        break
      print "Sorry, invalid response."
  if overwrite is False:
    print "Refusing to overwrite existing file '%s'."%(args.ncfile)
    exit(1)


# Load the input file
data = fstd.open(args.rpnfile, squash_forecasts=args.squash_forecasts, raw_list=True)

if selected_vars is not None:
  data = [d for d in data if d.name in selected_vars]

print "Found variables:", ' '.join(d.name for d in data)

# Tweak the data?
if args.oldstyle:
  import numpy as np
  data = asdataset(data)
  if 'lat' in data:
    data = data.rename_axes(x='xcoord', y='ycoord')
    data = data.rename_vars(lat='latitudes', lon='longitudes')
    # Fudge the longitudes to be from -180..180
    lon = np.array(data.longitudes.get())
    lon[lon>180] -= 360
    data.longitudes.values = lon
  # Convert relative times to hours (instead of seconds)
  data.time.values = data.time.values / 3600.
  data.time.units = 'hours'
  # Reverse the z-axis order
  data = list(data.vars)
  for i, var in enumerate(data):
    if not var.hasaxis('zaxis'): continue
    sl = [slice(None)]*var.naxes
    iz = var.whichaxis('zaxis')
    sl[iz] = slice(var.shape[iz]-1,None,-1)
    data[i] = var.slice[sl]

# Put the command-line invocation into the output file metadata
data  = asdataset(data)
from datetime import datetime
datestr = datetime.today().strftime('%c')
full_command = ' '.join(argv)
data.atts['history'] = datestr + ': ' + full_command


# Write to netcdf
netcdf.save(args.ncfile, data)

